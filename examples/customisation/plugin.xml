<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html-iso8601" table-class="display nowrap" order="7">

<css lib="datatables searchbuilder datetime"/>
<css lib="//cdn.jsdelivr.net/npm/select2@4.0.13/dist/css/select2.min.css"/>

<js lib="jquery"/> 
<js lib="//cdn.jsdelivr.net/npm/select2@4.0.13/dist/js/select2.js"/>
<js lib="datatables searchbuilder datetime">
<![CDATA[

// Add custom conditions plugin
DataTable.ext.searchBuilder.conditions.select2 = {
	'=': {
		// This function decides whether to include the criteria in the search
		isInputValid: function (el, that) {
			// If no options have been selected, or one has but it has no value then do not include the criteria
			if (
				$(el[0]).has('option:selected').length < 1 ||
				($(el[0]).has('option:selected').length === 1 &&
					$($(el[0]).children('option:selected')[0]).text().length === 0)
			) {
				return false;
			}

			return true;
		},
		// This is the string displayed in the condition select
		conditionName: 'Equals',
		// This function gathers/sets the values from the dom elements created in the init function that are to be used for searching
		inputValue: function (el) {
			let values = [];

			for (let element of el) {
				if ($(element).is('select')) {
					values.push(
						$(element)
							.children('option:selected')
							.val()
					);
				}
			}

			// return the selected values
			return values;
		},
		// This function initialises the criteria, specifically any dom elements that are required for its use
		init: function (that, fn, preDefined = null) {
			// As the select2 element is going to be populated with the values from the table,
			// we need the row indexes and the column index.
			let column = $(that.dom.data)
				.children('option:selected')
				.val();
			let indexArray = that.s.dt
				.rows()
				.indexes()
				.toArray();
			let added = [];

			// Declare select2 element
			let el = $(
				'<select class="js-example-placeholder-single js-states form-control" style="width: 300px"/>'
			);
			$(el).prepend('<option></option>');

			// Set necessary listener to trigger search
			el.on('select2:select', function () {
				fn(that, el);
			});

			// for each row
			for (let index of indexArray) {
				// Extract the relevant data
				let cell = that.s.dt.cell(index, column);
				let value = {
					filter: cell.render(
						that.c.orthogonal.search
					),
					index,
					text: cell.render('display')
				};

				// If we have not already added this value
				if (added.indexOf(value.filter) === -1) {
					// Create the option to add to the select 2 element
					let opt = $('<option>', {
						text: value.text,
						value: value.filter
					})
						.addClass(that.classes.option)
						.addClass(that.classes.notItalic);

					$(el).append(opt);

					// Take note of the filter value so we do not add it again
					added.push(value.filter);

					// Check if it is preDefined and if so select it
					if (preDefined !== null && opt.val() === preDefined[0]) {
						opt.attr('selected', true);
					}
				}
			}

			// Trigger select2 on the select element when it is inserted into the dom
			$(el).on('dtsb-inserted', function () {
				if ($(el).hasClass('select2-hidden-accessible')) {
					$(el).select2('destroy');
				}

				$(el).select2({ placeholder: 'Value' });

				if (preDefined !== null) {
					$(el).val(preDefined[0]);
					$(el).trigger('input');
				}
			});

			return el;
		},
		// Straightforward search function comparing value from table and comparison from the select2 element
		// These values are retrieved in `inputValue`
		search: function (value, comparison) {
			return value === comparison[0];
		}
	}
};

$('#example').DataTable({
	columnDefs: [{ searchBuilderType: 'select2', targets: 2 }],
	layout: {
		top1: 'searchBuilder'
	}
});

]]>
</js>

<title lib="SearchBuilder">Plug-in Example</title>

<info><![CDATA[

This example shows how to use a plugin for a custom column type. The `DataTable.ext.searchBuilder.conditions` object allows for custom conditions to be added to SearchBuilder. Details on the structure of the conditions to be added can be found at `-feature searchBuilder.conditions`.

Here the office column is instructed to use the Select2 plugin through `-init columns.searchBuilderType`. To use the custom filter from the plugin select Office > Equals and any office, you will see that the last `-tag select` element is a select2 element.

For more information on creating your own plug-ins take a look at [this document](https://datatables.net/extensions/searchbuilder/plugins).

]]></info>

</dt-example>
